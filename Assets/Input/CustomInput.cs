//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e97a6124-f2fc-4da9-9e74-7deaa90c80b7"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f1772e81-ddd3-40f0-b4f0-04a51ccd05f5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""dfe308e3-0ddb-4f64-b992-13cff2e4b02a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""f246a9cf-818b-4e2c-9384-13be5798e48a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemIteraction"",
                    ""type"": ""Button"",
                    ""id"": ""9bca65c7-53f3-46c3-8131-e6d33c3ad21c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemChange"",
                    ""type"": ""Button"",
                    ""id"": ""d8fa81f8-2852-489e-a2ef-728f81e1a9e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""73892c7f-8e1c-4539-99b4-74fbbdac27c7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ca2afd12-2da4-4d39-b6f8-0d2b39d5864d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8fe1b68d-5d7c-40ed-8179-7646e87dcab1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""aa2a30d9-2ca8-4a90-b106-fb40db88c653"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c3333235-c8ad-4e02-90ac-621183c0a589"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""0c7e2c21-eb5e-4437-95ec-4a249feeb349"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""15579673-8316-441b-a2ff-cf67dd6ff56f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5b80cbac-0694-4b8c-8628-bde14ab9a05f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bd5e3716-7b19-445b-966b-8a25aa9db438"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ef5814bb-3acc-4317-bb7a-2b5d52c49b21"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""d967e4f4-f973-4bb2-b8e0-737d39e42fc3"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9860f099-1dd3-40d9-a575-eb98197b585f"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6e1c1d6f-5c9b-4e0f-9d21-2d789d1b2b11"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6f3ff7d3-aa9c-4700-ac59-7c57e309f8a7"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ed040dc3-611c-402c-8a12-eb30aaa55833"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Crest"",
                    ""id"": ""da5883d9-b5d7-4a3a-a1c9-7a1ae8603edb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a39a7465-1d90-4b0a-abe2-818be39f7fdc"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b189f56a-119f-47a2-b4db-e719e4115ecd"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8cba5dbe-ba2b-49e0-8f42-fea456c51663"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8ffdeadd-f6aa-4617-8046-159f4ad3fb13"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7f824eae-9f33-4ad7-8647-0f6578b9d2fc"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b20079b1-c8d3-4a4c-a631-f00c34b91a61"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4ebefa5-fa1e-48cf-bc35-f1556e739d83"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemIteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cec5638-cfbc-439d-8733-a05de788d6a8"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdead3ef-1167-4715-9bc9-fb362f4697b5"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5e3b2b8-52b3-41ac-ac83-b60d2a4c9b47"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bea3e382-c6c2-449a-aa99-93d1b4c3bdd1"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4354333f-b270-4939-bb79-1ba65d309639"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2c79109-25f7-4f8f-8494-611968abc423"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""952463d1-91f8-4891-be42-e40b759c93a0"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6f99500-4d73-4c4b-99a5-8f8033c9d317"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07f373ec-974f-4815-bcff-f527969623bc"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Global"",
            ""id"": ""207f9d82-9ff1-479a-b0db-dfcdb06f94f3"",
            ""actions"": [
                {
                    ""name"": ""OpenBestiary"",
                    ""type"": ""Button"",
                    ""id"": ""b6c78d64-bbb2-47a3-b6fc-17a79beed934"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClosePrayerBook"",
                    ""type"": ""Button"",
                    ""id"": ""68f7aac5-cbdb-4a88-a389-fda9b7d03720"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79692516-83b8-4745-b876-30bfc2156b07"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenBestiary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8a50c7f-ac2a-426b-95b8-65cc338a0103"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenBestiary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4284761c-9492-4422-a3de-470f7796eed7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClosePrayerBook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Bestiary"",
            ""id"": ""84adc999-975b-4604-8acb-24e3744c3184"",
            ""actions"": [
                {
                    ""name"": ""BestiaryNavigation"",
                    ""type"": ""Value"",
                    ""id"": ""815e9b6c-d215-4ce8-9190-4da602325c33"",
                    ""expectedControlType"": ""Double"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard AD"",
                    ""id"": ""7504ef1f-7c8e-43fb-9951-c761a6db35c8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BestiaryNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9811bab7-1434-46df-b367-6ba70a008d26"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BestiaryNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9cd57cca-8020-43cd-b170-809db05b6f50"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BestiaryNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard arrows"",
                    ""id"": ""beb5e35b-abd1-45ba-9192-2a75e95a4429"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BestiaryNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c32ce27b-5705-4f0b-ad22-f52134be81c8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BestiaryNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ece13aa7-0277-452a-833c-4ced1ab3df3d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BestiaryNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""b2c53a9c-e47a-40b5-908a-840383889fd1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BestiaryNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""069153bc-710f-4fcf-8c25-d325601cddee"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BestiaryNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f76c2cb2-8288-4872-95cd-6b3271e390d0"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BestiaryNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""17b0d8c3-5061-4650-a9bb-10e539c9c55a"",
            ""actions"": [
                {
                    ""name"": ""NextPhrase"",
                    ""type"": ""Button"",
                    ""id"": ""e961b663-4806-4d2d-8d21-4805cce687a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""40fa2b98-cf2c-4a68-a849-071ea9988d87"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextPhrase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SlideShow"",
            ""id"": ""1b363fc5-26fc-48ae-b0a2-fbeae23cdaa0"",
            ""actions"": [
                {
                    ""name"": ""NextSlide"",
                    ""type"": ""Button"",
                    ""id"": ""e06dd5d3-cede-4d19-8c67-14f00600e846"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""24172b19-1663-4c11-907c-715d92586ab9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efe0cccd-8779-4a67-a0d9-fa7140287c1c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d70674b-e4d9-4527-992f-42c84f178344"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7202a455-94ed-4a9c-8eca-de0a4a7d6632"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Note"",
            ""id"": ""3de7b5ee-c7ea-4b65-9c0a-340c70422439"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""6d4306e9-c3e4-47fb-bf94-380687c5685f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1acebe0c-8173-49dc-be01-57a898a80d02"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Interaction = m_Player.FindAction("Interaction", throwIfNotFound: true);
        m_Player_Inventory = m_Player.FindAction("Inventory", throwIfNotFound: true);
        m_Player_ItemIteraction = m_Player.FindAction("ItemIteraction", throwIfNotFound: true);
        m_Player_ItemChange = m_Player.FindAction("ItemChange", throwIfNotFound: true);
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_OpenBestiary = m_Global.FindAction("OpenBestiary", throwIfNotFound: true);
        m_Global_ClosePrayerBook = m_Global.FindAction("ClosePrayerBook", throwIfNotFound: true);
        // Bestiary
        m_Bestiary = asset.FindActionMap("Bestiary", throwIfNotFound: true);
        m_Bestiary_BestiaryNavigation = m_Bestiary.FindAction("BestiaryNavigation", throwIfNotFound: true);
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_NextPhrase = m_Dialogue.FindAction("NextPhrase", throwIfNotFound: true);
        // SlideShow
        m_SlideShow = asset.FindActionMap("SlideShow", throwIfNotFound: true);
        m_SlideShow_NextSlide = m_SlideShow.FindAction("NextSlide", throwIfNotFound: true);
        // Note
        m_Note = asset.FindActionMap("Note", throwIfNotFound: true);
        m_Note_Close = m_Note.FindAction("Close", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Interaction;
    private readonly InputAction m_Player_Inventory;
    private readonly InputAction m_Player_ItemIteraction;
    private readonly InputAction m_Player_ItemChange;
    public struct PlayerActions
    {
        private @CustomInput m_Wrapper;
        public PlayerActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Interaction => m_Wrapper.m_Player_Interaction;
        public InputAction @Inventory => m_Wrapper.m_Player_Inventory;
        public InputAction @ItemIteraction => m_Wrapper.m_Player_ItemIteraction;
        public InputAction @ItemChange => m_Wrapper.m_Player_ItemChange;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @ItemIteraction.started += instance.OnItemIteraction;
            @ItemIteraction.performed += instance.OnItemIteraction;
            @ItemIteraction.canceled += instance.OnItemIteraction;
            @ItemChange.started += instance.OnItemChange;
            @ItemChange.performed += instance.OnItemChange;
            @ItemChange.canceled += instance.OnItemChange;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @ItemIteraction.started -= instance.OnItemIteraction;
            @ItemIteraction.performed -= instance.OnItemIteraction;
            @ItemIteraction.canceled -= instance.OnItemIteraction;
            @ItemChange.started -= instance.OnItemChange;
            @ItemChange.performed -= instance.OnItemChange;
            @ItemChange.canceled -= instance.OnItemChange;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Global
    private readonly InputActionMap m_Global;
    private List<IGlobalActions> m_GlobalActionsCallbackInterfaces = new List<IGlobalActions>();
    private readonly InputAction m_Global_OpenBestiary;
    private readonly InputAction m_Global_ClosePrayerBook;
    public struct GlobalActions
    {
        private @CustomInput m_Wrapper;
        public GlobalActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenBestiary => m_Wrapper.m_Global_OpenBestiary;
        public InputAction @ClosePrayerBook => m_Wrapper.m_Global_ClosePrayerBook;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void AddCallbacks(IGlobalActions instance)
        {
            if (instance == null || m_Wrapper.m_GlobalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Add(instance);
            @OpenBestiary.started += instance.OnOpenBestiary;
            @OpenBestiary.performed += instance.OnOpenBestiary;
            @OpenBestiary.canceled += instance.OnOpenBestiary;
            @ClosePrayerBook.started += instance.OnClosePrayerBook;
            @ClosePrayerBook.performed += instance.OnClosePrayerBook;
            @ClosePrayerBook.canceled += instance.OnClosePrayerBook;
        }

        private void UnregisterCallbacks(IGlobalActions instance)
        {
            @OpenBestiary.started -= instance.OnOpenBestiary;
            @OpenBestiary.performed -= instance.OnOpenBestiary;
            @OpenBestiary.canceled -= instance.OnOpenBestiary;
            @ClosePrayerBook.started -= instance.OnClosePrayerBook;
            @ClosePrayerBook.performed -= instance.OnClosePrayerBook;
            @ClosePrayerBook.canceled -= instance.OnClosePrayerBook;
        }

        public void RemoveCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGlobalActions instance)
        {
            foreach (var item in m_Wrapper.m_GlobalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GlobalActions @Global => new GlobalActions(this);

    // Bestiary
    private readonly InputActionMap m_Bestiary;
    private List<IBestiaryActions> m_BestiaryActionsCallbackInterfaces = new List<IBestiaryActions>();
    private readonly InputAction m_Bestiary_BestiaryNavigation;
    public struct BestiaryActions
    {
        private @CustomInput m_Wrapper;
        public BestiaryActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @BestiaryNavigation => m_Wrapper.m_Bestiary_BestiaryNavigation;
        public InputActionMap Get() { return m_Wrapper.m_Bestiary; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BestiaryActions set) { return set.Get(); }
        public void AddCallbacks(IBestiaryActions instance)
        {
            if (instance == null || m_Wrapper.m_BestiaryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BestiaryActionsCallbackInterfaces.Add(instance);
            @BestiaryNavigation.started += instance.OnBestiaryNavigation;
            @BestiaryNavigation.performed += instance.OnBestiaryNavigation;
            @BestiaryNavigation.canceled += instance.OnBestiaryNavigation;
        }

        private void UnregisterCallbacks(IBestiaryActions instance)
        {
            @BestiaryNavigation.started -= instance.OnBestiaryNavigation;
            @BestiaryNavigation.performed -= instance.OnBestiaryNavigation;
            @BestiaryNavigation.canceled -= instance.OnBestiaryNavigation;
        }

        public void RemoveCallbacks(IBestiaryActions instance)
        {
            if (m_Wrapper.m_BestiaryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBestiaryActions instance)
        {
            foreach (var item in m_Wrapper.m_BestiaryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BestiaryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BestiaryActions @Bestiary => new BestiaryActions(this);

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
    private readonly InputAction m_Dialogue_NextPhrase;
    public struct DialogueActions
    {
        private @CustomInput m_Wrapper;
        public DialogueActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextPhrase => m_Wrapper.m_Dialogue_NextPhrase;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
            @NextPhrase.started += instance.OnNextPhrase;
            @NextPhrase.performed += instance.OnNextPhrase;
            @NextPhrase.canceled += instance.OnNextPhrase;
        }

        private void UnregisterCallbacks(IDialogueActions instance)
        {
            @NextPhrase.started -= instance.OnNextPhrase;
            @NextPhrase.performed -= instance.OnNextPhrase;
            @NextPhrase.canceled -= instance.OnNextPhrase;
        }

        public void RemoveCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);

    // SlideShow
    private readonly InputActionMap m_SlideShow;
    private List<ISlideShowActions> m_SlideShowActionsCallbackInterfaces = new List<ISlideShowActions>();
    private readonly InputAction m_SlideShow_NextSlide;
    public struct SlideShowActions
    {
        private @CustomInput m_Wrapper;
        public SlideShowActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextSlide => m_Wrapper.m_SlideShow_NextSlide;
        public InputActionMap Get() { return m_Wrapper.m_SlideShow; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SlideShowActions set) { return set.Get(); }
        public void AddCallbacks(ISlideShowActions instance)
        {
            if (instance == null || m_Wrapper.m_SlideShowActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SlideShowActionsCallbackInterfaces.Add(instance);
            @NextSlide.started += instance.OnNextSlide;
            @NextSlide.performed += instance.OnNextSlide;
            @NextSlide.canceled += instance.OnNextSlide;
        }

        private void UnregisterCallbacks(ISlideShowActions instance)
        {
            @NextSlide.started -= instance.OnNextSlide;
            @NextSlide.performed -= instance.OnNextSlide;
            @NextSlide.canceled -= instance.OnNextSlide;
        }

        public void RemoveCallbacks(ISlideShowActions instance)
        {
            if (m_Wrapper.m_SlideShowActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISlideShowActions instance)
        {
            foreach (var item in m_Wrapper.m_SlideShowActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SlideShowActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SlideShowActions @SlideShow => new SlideShowActions(this);

    // Note
    private readonly InputActionMap m_Note;
    private List<INoteActions> m_NoteActionsCallbackInterfaces = new List<INoteActions>();
    private readonly InputAction m_Note_Close;
    public struct NoteActions
    {
        private @CustomInput m_Wrapper;
        public NoteActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_Note_Close;
        public InputActionMap Get() { return m_Wrapper.m_Note; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NoteActions set) { return set.Get(); }
        public void AddCallbacks(INoteActions instance)
        {
            if (instance == null || m_Wrapper.m_NoteActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NoteActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        private void UnregisterCallbacks(INoteActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        public void RemoveCallbacks(INoteActions instance)
        {
            if (m_Wrapper.m_NoteActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INoteActions instance)
        {
            foreach (var item in m_Wrapper.m_NoteActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NoteActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NoteActions @Note => new NoteActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnItemIteraction(InputAction.CallbackContext context);
        void OnItemChange(InputAction.CallbackContext context);
    }
    public interface IGlobalActions
    {
        void OnOpenBestiary(InputAction.CallbackContext context);
        void OnClosePrayerBook(InputAction.CallbackContext context);
    }
    public interface IBestiaryActions
    {
        void OnBestiaryNavigation(InputAction.CallbackContext context);
    }
    public interface IDialogueActions
    {
        void OnNextPhrase(InputAction.CallbackContext context);
    }
    public interface ISlideShowActions
    {
        void OnNextSlide(InputAction.CallbackContext context);
    }
    public interface INoteActions
    {
        void OnClose(InputAction.CallbackContext context);
    }
}
